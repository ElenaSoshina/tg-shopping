// import React, { useState, useEffect, useMemo } from 'react';
// import { useLocation, useNavigate } from 'react-router-dom';
// import './OrderPage.css';
// import { Form, Input, Select, message } from 'antd';
// import OrderPopup from './OrderPopup';
// import { debounce } from 'lodash';
//
// const { Option } = Select;
// const tg = window.Telegram.WebApp;
//
// function OrderPage({ webAppQueryId }) {
//     const [form] = Form.useForm();
//     const [showPopup, setShowPopup] = useState(false);
//     const [orderItems, setOrderItems] = useState([]);
//     const [orderDetails, setOrderDetails] = useState(null);
//     const location = useLocation();
//     const navigate = useNavigate();
//     const pickupAddress = 'Mui ne, Ocean vista, block B';
//
//     // –ú–∞–ø–ø–∏–Ω–≥ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
//     const unitMapping = useMemo(() => ({
//         cheese: '—à—Ç',
//         fish: '–≥',
//         lemon: '—É–ø',
//     }), []);
//
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º useMemo –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–æ–ø–ø–∏–Ω–≥–æ–≤
//     const toppingsMapping = useMemo(() => ({
//         sourCream: '–ô–æ–≥—É—Ä—Ç',
//         condensedMilk: '–°–≥—É—â–µ–Ω–∫–∞',
//         passionFruitJam: '–î–∂–µ–º –∏–∑ –º–∞—Ä–∞–∫—É–π–∏',
//     }), []);
//
//     // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ sessionStorage
//     useEffect(() => {
//         const savedOrder = JSON.parse(sessionStorage.getItem('currentOrder')) || [];
//         setOrderItems(savedOrder);
//     }, []);
//
//     // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ sessionStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
//     useEffect(() => {
//         sessionStorage.setItem('currentOrder', JSON.stringify(orderItems));
//     }, [orderItems]);
//
//     // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ location –∏–ª–∏ sessionStorage
//     const orderData = useMemo(() => {
//         return (
//             location.state?.orderData || // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state, –µ—Å–ª–∏ –µ—Å—Ç—å
//             (location.pathname === '/order' && JSON.parse(sessionStorage.getItem('fishOrderData'))) || // –¢–æ–ª—å–∫–æ –¥–ª—è FishPage
//             (location.pathname === '/order' && JSON.parse(sessionStorage.getItem('cheeseOrderData'))) || // –¢–æ–ª—å–∫–æ –¥–ª—è CheesePage
//             (location.pathname === '/order' && JSON.parse(sessionStorage.getItem('lemonOrderData'))) || // –¢–æ–ª—å–∫–æ –¥–ª—è LemonPage
//             {}
//         );
//     }, [location.state, location.pathname]);
//
//     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
//     useEffect(() => {
//         if (orderData?.quantity && orderData?.category) {
//             const newOrderItem = {
//                 id: `${orderData.type}-${orderData.category}`,
//                 title: orderData.category,
//                 quantity: orderData.quantity,
//                 price: orderData.price,
//                 image: orderData.image,
//                 toppings: orderData.toppings || [],
//                 type: orderData.type,
//             };
//
//             setOrderItems((prevItems) => {
//                 const existingItemIndex = prevItems.findIndex((item) => item.id === newOrderItem.id);
//                 if (existingItemIndex !== -1) {
//                     const updatedItems = [...prevItems];
//                     updatedItems[existingItemIndex] = { ...newOrderItem };
//                     return updatedItems;
//                 }
//                 return [...prevItems, newOrderItem];
//             });
//         }
//     }, [orderData]);
//
//     const totalPrice = useMemo(() => {
//         return orderItems.reduce((sum, item) => {
//             const itemPrice = Number(item.price);
//             return sum + (isNaN(itemPrice) ? 0 : itemPrice);
//         }, 0);
//     }, [orderItems]);
//
//     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π MainButton
//     const validateAndShowButton = useMemo(
//         () =>
//         debounce(() => {
//             form.validateFields()
//                 .then(() => {
//                     tg.MainButton.setText('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
//                     tg.MainButton.show();
//                 })
//                 .catch(() => {
//                     tg.MainButton.hide();
//                 });
//         }, 300),
//         [form]
//     );
//
//     useEffect(() => {
//         // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–æ—Ä–º—ã
//         form.setFieldsValue({
//             name: '',
//             phone: '',
//             deliveryMethod: undefined,
//         });
//
//         // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
//         validateAndShowButton();
//
//         return () => {
//             tg.MainButton.hide();
//         };
//     }, [form, validateAndShowButton]);
//
//     useEffect(() => {
//         const handleMainButtonClick = () => {
//             console.log('[DEBUG] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"');
//             form.submit(); // –í—ã–∑–æ–≤–µ—Ç onFinish —Ñ–æ—Ä–º—ã
//         };
//
//         tg.MainButton.onClick(handleMainButtonClick);
//
//         // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
//         return () => {
//             tg.MainButton.offClick(handleMainButtonClick);
//         };
//     }, [form]);
//
//     async function handleOrderSubmit(values) {
//         const details = {
//             ...values,
//             address: values.deliveryMethod === 'delivery' ? values.address : pickupAddress,
//             items: orderItems.map((item) => ({
//                 ...item,
//                 total: (item.price * item.quantity).toFixed(2),
//             })),
//             totalPrice: totalPrice.toFixed(2),
//         };
//
//         alert("[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + JSON.stringify(details, null, 2));
//
//
//         try {
//             // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
//             tg.sendData(JSON.stringify(details));
//
//             // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//             const itemsList = details.items
//                 .map((item) => (
//                     `${item.title} ‚Äî ${item.quantity} ${unitMapping[item.type]} ‚Äî ${item.total} VND`
//                 ))
//                 .join('\n');
//
//             const messageText = `üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n\n${itemsList}\n\nüí≥ *–ò—Ç–æ–≥–æ:* ${details.totalPrice} VND\n\nüìç *–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:* ${
//                 details.deliveryMethod === 'delivery'
//                     ? '–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å: ' + details.address
//                     : '–°–∞–º–æ–≤—ã–≤–æ–∑'
//             }`;
//
//             console.log('[DEBUG] Message sent to user:', messageText);
//
//             // –ó–∞–∫—Ä—ã—Ç–∏–µ WebApp
//             tg.close();
//
//             setOrderDetails(details);
//             setShowPopup(true);
//             message.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!');
//         } catch (error) {
//             console.error('[ERROR] Sending order details:', error);
//             message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
//         }
//     }
//
//     return (
//         <>
//             <div className="order-container">
//                 <div className="order-details">
//                     {orderItems.map((item, index) => {
//                         const displayTitle = item.type === 'fish' ? `–õ–æ—Å–æ—Å—å ${item.title}` : item.title;
//
//                         return (
//                             <div key={item.id} className="order-item">
//                                 <img src={item.image || '../../images/fish.webp'} alt={item.title}
//                                      className="order-item-image"/>
//                                 <div className="order-item-info">
//                                     <h3>{displayTitle}</h3>
//                                     <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}{unitMapping[item.type]}</p>
//                                     {item.toppings.length > 0 && (
//                                         <p>–¢–æ–ø–ø–∏–Ω–≥–∏: {item.toppings.map((topping) => toppingsMapping[topping] || topping).join(', ')}</p>
//                                     )}
//                                     <p>–¶–µ–Ω–∞: {item.price && !isNaN(item.price) ? Number(item.price).toLocaleString('ru-RU') : '0'} VND</p>
//                                     {index < orderItems.length - 1 && <hr/>}
//                                     <div className="order-item-actions">
//                                         <button
//                                             className="edit-button"
//                                             onClick={() => {
//                                                 sessionStorage.setItem(`${item.type}OrderData`, JSON.stringify(item));
//                                                 navigate(`/${item.type}`);
//                                             }}
//                                         >
//                                             –ò–∑–º–µ–Ω–∏—Ç—å
//                                         </button>
//                                         <button
//                                             className="delete-button"
//                                             onClick={() => {
//                                                 setOrderItems((prevItems) => prevItems.filter((_, i) => i !== index));
//                                             }}
//                                         >
//                                             –£–¥–∞–ª–∏—Ç—å
//                                         </button>
//                                     </div>
//                                 </div>
//                             </div>
//                         )
//                         }
//                     )}
//                     <h2>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {totalPrice > 0 ? totalPrice.toLocaleString('ru-RU') : '0'} VND</h2>
//                 </div>
//
//
//                 {showPopup && (
//                     <OrderPopup onClose={() => tg.close()} orderDetails={orderDetails} webAppQueryId={webAppQueryId}/>
//                 )}
//             </div>
//
//             <h3 className="add-order-header">–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑</h3>
//             <div className="order-buttons">
//                 <button onClick={() => navigate('/cheese')}>–°—ã—Ä–Ω–∏–∫–∏</button>
//                 <button onClick={() => navigate('/fish')}>–õ–æ—Å–æ—Å—å</button>
//                 <button onClick={() => navigate('/lemon')}>–õ–∏–º–æ–Ω—ã</button>
//             </div>
//
//             <div className="order-form">
//                 <h3>–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</h3>
//                 <Form
//                     layout="vertical"
//                     form={form}
//                     onFinish={handleOrderSubmit}
//                     onValuesChange={validateAndShowButton}
//                     initialValues={{
//                         name: '',
//                         phone: '',
//                         deliveryMethod: undefined,
//                     }}
//                 >
//                     <Form.Item label="–ò–º—è" name="name" rules={[{required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è'}]}>
//                         <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"/>
//                     </Form.Item>
//                     <Form.Item
//                         label="–¢–µ–ª–µ—Ñ–æ–Ω"
//                         name="phone"
//                         rules={[
//                             {required: true, pattern: /^\+?\d{10,15}$/, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'},
//                         ]}
//                     >
//                         <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
//                                inputMode="numeric"
//                                pattern={"[0-9]*"}
//                         />
//                     </Form.Item>
//                     <Form.Item
//                         label="–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è"
//                         name="deliveryMethod"
//                         rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è' }]}
//                     >
//                         <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è" allowClear>
//                             <Option value="pickup">–°–∞–º–æ–≤—ã–≤–æ–∑</Option>
//                             <Option value="delivery">–î–æ—Å—Ç–∞–≤–∫–∞</Option>
//                         </Select>
//                     </Form.Item>
//
//                     <Form.Item shouldUpdate={(prevValues, currentValues) => prevValues.deliveryMethod !== currentValues.deliveryMethod}>
//                         {({ getFieldValue }) => {
//                             const deliveryMethod = getFieldValue('deliveryMethod');
//                             return deliveryMethod === 'delivery' ? (
//                                 <Form.Item
//                                     label="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
//                                     name="address"
//                                     rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏' }]}
//                                 >
//                                     <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" />
//                                 </Form.Item>
//                             ) : deliveryMethod === 'pickup' ? (
//                                 <p className="pickup-address">–°–∞–º–æ–≤—ã–≤–æ–∑: {pickupAddress}</p>
//                             ) : null;
//                         }}
//                     </Form.Item>
//                 </Form>
//             </div>
//         </>
//     );
// }
//
// export default OrderPage;


import React, { useState, useEffect, useMemo } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import './OrderPage.css';
import { Form, Input, Select } from 'antd';
import { debounce } from 'lodash';

const { Option } = Select;
const tg = window.Telegram.WebApp;

function OrderPage() {
    const [form] = Form.useForm();
    const [orderItems, setOrderItems] = useState([]);
    const location = useLocation();
    const navigate = useNavigate();
    const pickupAddress = 'Mui ne, Ocean vista, block B';

    const unitMapping = useMemo(() => ({
        cheese: '—à—Ç',
        fish: '–≥',
        lemon: '—É–ø',
    }), []);

    useEffect(() => {
        const savedOrder = JSON.parse(sessionStorage.getItem('currentOrder')) || [];
        setOrderItems(savedOrder);
    }, []);

    useEffect(() => {
        sessionStorage.setItem('currentOrder', JSON.stringify(orderItems));
    }, [orderItems]);

    const orderData = useMemo(() => {
        return (
            location.state?.orderData ||
            JSON.parse(sessionStorage.getItem('fishOrderData')) ||
            JSON.parse(sessionStorage.getItem('cheeseOrderData')) ||
            JSON.parse(sessionStorage.getItem('lemonOrderData')) ||
            {}
        );
    }, [location.state]);

    useEffect(() => {
        if (orderData?.quantity && orderData?.category) {
            const newOrderItem = {
                id: `${orderData.type}-${orderData.category}`,
                title: orderData.category,
                quantity: orderData.quantity,
                price: orderData.price,
                image: orderData.image,
                type: orderData.type,
            };

            setOrderItems((prevItems) => {
                const existingIndex = prevItems.findIndex((item) => item.id === newOrderItem.id);
                if (existingIndex !== -1) {
                    const updatedItems = [...prevItems];
                    updatedItems[existingIndex] = { ...newOrderItem };
                    return updatedItems;
                }
                return [...prevItems, newOrderItem];
            });
        }
    }, [orderData]);

    const totalPrice = useMemo(() => {
        return orderItems.reduce((sum, item) => sum + (Number(item.price) || 0), 0);
    }, [orderItems]);

    const validateAndShowButton = useMemo(() =>
            debounce(() => {
                form.validateFields()
                    .then(() => {
                        tg.MainButton.setText('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
                        tg.MainButton.show();
                    })
                    .catch(() => {
                        tg.MainButton.hide();
                    });
            }, 300),
        [form]);

    useEffect(() => {
        form.setFieldsValue({
            name: '',
            phone: '',
            deliveryMethod: undefined,
        });

        validateAndShowButton();

        return () => {
            tg.MainButton.hide();
        };
    }, [form, validateAndShowButton]);

    useEffect(() => {
        const handleMainButtonClick = () => {
            form.submit();
        };

        tg.MainButton.onClick(handleMainButtonClick);

        return () => {
            tg.MainButton.offClick(handleMainButtonClick);
        };
    }, [form]);

    async function handleOrderSubmit(values) {
        const details = {
            ...values,
            address: values.deliveryMethod === 'delivery' ? values.address : pickupAddress,
            items: orderItems.map((item) => ({
                ...item,
                total: (item.price * item.quantity).toFixed(2),
            })),
            totalPrice: totalPrice.toFixed(2),
        };

        alert(`[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:\n${JSON.stringify(details, null, 2)}`);

        const queryId = tg.initDataUnsafe?.query_id;

        if (queryId) {
            try {
                const payload = {
                    type: 'article',
                    id: 'order_summary',
                    title: '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
                    input_message_content: {
                        message_text: `üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n${details.items.map((item) =>
                            `${item.title} ‚Äî ${item.quantity} ${unitMapping[item.type]} ‚Äî ${item.total} VND`
                        ).join('\n')}\n\nüí≥ –ò—Ç–æ–≥–æ: ${details.totalPrice} VND`,
                        parse_mode: 'HTML',
                    },
                };

                // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞
                if (tg.answerWebAppQuery) {
                    await tg.answerWebAppQuery(queryId, payload);
                    alert('[DEBUG] –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ answerWebAppQuery');
                } else {
                    throw new Error('–ú–µ—Ç–æ–¥ answerWebAppQuery –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
            } catch (error) {
                alert(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ answerWebAppQuery: ${error.message}`);
            }
        } else {
            alert('[ERROR] query_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
        }
    }


    return (
        <>
            <div className="order-container">
                <div className="order-details">
                    {orderItems.map((item, index) => (
                        <div key={item.id} className="order-item">
                            <img src={item.image || '../../images/fish.webp'} alt={item.title} className="order-item-image" />
                            <div className="order-item-info">
                                <h3>{item.type === 'fish' ? `–õ–æ—Å–æ—Å—å ${item.title}` : item.title}</h3>
                                <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}{unitMapping[item.type]}</p>
                                <p>–¶–µ–Ω–∞: {item.price?.toLocaleString('ru-RU')} VND</p>
                                {index < orderItems.length - 1 && <hr />}
                            </div>
                        </div>
                    ))}
                    <h2>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {totalPrice.toLocaleString('ru-RU')} VND</h2>
                </div>

                <h3 className="add-order-header">–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑</h3>
                <div className="order-buttons">
                    <button onClick={() => navigate('/cheese')}>–°—ã—Ä–Ω–∏–∫–∏</button>
                    <button onClick={() => navigate('/fish')}>–õ–æ—Å–æ—Å—å</button>
                    <button onClick={() => navigate('/lemon')}>–õ–∏–º–æ–Ω—ã</button>
                </div>

                <Form
                    layout="vertical"
                    form={form}
                    onFinish={handleOrderSubmit}
                    onValuesChange={validateAndShowButton}
                >
                    <Form.Item label="–ò–º—è" name="name" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è' }]}>
                        <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" />
                    </Form.Item>
                    <Form.Item label="–¢–µ–ª–µ—Ñ–æ–Ω" name="phone" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }]}>
                        <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" />
                    </Form.Item>
                    <Form.Item label="–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è" name="deliveryMethod" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è' }]}>
                        <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è">
                            <Option value="pickup">–°–∞–º–æ–≤—ã–≤–æ–∑</Option>
                            <Option value="delivery">–î–æ—Å—Ç–∞–≤–∫–∞</Option>
                        </Select>
                    </Form.Item>
                </Form>
            </div>
        </>
    );
}

export default OrderPage;

