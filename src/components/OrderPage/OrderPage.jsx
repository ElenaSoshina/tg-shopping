import React, { useState, useEffect, useMemo } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import './OrderPage.css';
import { Form, Input, Select, message } from 'antd';
import OrderPopup from './OrderPopup';
import { debounce } from 'lodash';

const { Option } = Select;
const tg = window.Telegram.WebApp;

function OrderPage({ webAppQueryId }) {
    const [form] = Form.useForm();
    const [showPopup, setShowPopup] = useState(false);
    const [orderItems, setOrderItems] = useState([]);
    const [orderDetails, setOrderDetails] = useState(null);
    const location = useLocation();
    const navigate = useNavigate();

    // –ï—Å–ª–∏ —É –≤–∞—Å –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ —Ç–æ—á–∫–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
    const pickupAddress = 'Mui ne, Ocean vista, block B';

    // –ú–∞–ø–ø–∏–Ω–≥ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    const unitMapping = useMemo(
        () => ({
            cheese: '—à—Ç',
            fish: '–≥',
            lemon: '—É–ø',
        }),
        []
    );

    // –ú–∞–ø–ø–∏–Ω–≥ —Ç–æ–ø–ø–∏–Ω–≥–æ–≤
    const toppingsMapping = useMemo(
        () => ({
            sourCream: '–ô–æ–≥—É—Ä—Ç',
            condensedMilk: '–°–≥—É—â–µ–Ω–∫–∞',
            passionFruitJam: '–î–∂–µ–º –∏–∑ –º–∞—Ä–∞–∫—É–π–∏',
        }),
        []
    );

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ sessionStorage (–µ—Å–ª–∏ –æ–Ω –±—ã–ª)
    useEffect(() => {
        const savedOrder = JSON.parse(sessionStorage.getItem('currentOrder')) || [];
        setOrderItems(savedOrder);
    }, []);

    // –ò —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    useEffect(() => {
        sessionStorage.setItem('currentOrder', JSON.stringify(orderItems));
    }, [orderItems]);

    // –°–º–æ—Ç—Ä–∏–º, –Ω–µ –ø—Ä–∏—à–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    const orderData = React.useMemo(() => {
        return (
            location.state?.orderData ||
            (location.pathname === '/order' && JSON.parse(sessionStorage.getItem('fishOrderData'))) ||
            (location.pathname === '/order' && JSON.parse(sessionStorage.getItem('cheeseOrderData'))) ||
            (location.pathname === '/order' && JSON.parse(sessionStorage.getItem('lemonOrderData'))) ||
            {}
        );
    }, [location.state, location.pathname]);

    // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä, –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–∫–∞–∑
    useEffect(() => {
        if (orderData?.quantity && orderData?.category) {
            const newOrderItem = {
                id: `${orderData.type}-${orderData.category}`,
                title: orderData.category,
                quantity: orderData.quantity,
                price: orderData.price,  // <== –í–ê–ñ–ù–û: price —É–∂–µ –ø–æ–ª–Ω—ã–π?
                image: orderData.image,
                toppings: orderData.toppings || [],
                type: orderData.type,
            };

            setOrderItems((prevItems) => {
                const existingItemIndex = prevItems.findIndex((item) => item.id === newOrderItem.id);
                if (existingItemIndex !== -1) {
                    const updatedItems = [...prevItems];
                    updatedItems[existingItemIndex] = { ...newOrderItem };
                    return updatedItems;
                }
                return [...prevItems, newOrderItem];
            });
        }
    }, [orderData]);

    // –ï—Å–ª–∏ price —É –Ω–∞—Å —É–∂–µ "–∑–∞ –≤—Å—é –ø–æ–∑–∏—Ü–∏—é", —Ç–æ totalPrice = —Å—É–º–º–∞ –≤—Å–µ—Ö price
    const totalPrice = React.useMemo(() => {
        return orderItems.reduce((sum, item) => {
            // item.price ‚Äî —ç—Ç–æ —É–∂–µ –∫–æ–Ω–µ—á–Ω–∞—è —Å—É–º–º–∞ –∑–∞ –≤–µ—Å—å —Ç–æ–≤–∞—Ä
            const itemPrice = Number(item.price);
            return sum + (isNaN(itemPrice) ? 0 : itemPrice);
        }, 0);
    }, [orderItems]);

    // –î–µ–±–∞—É–Ω—Å-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã –∏ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ Telegram
    const validateAndShowButton = React.useMemo(
        () =>
            debounce(() => {
                form
                    .validateFields()
                    .then(() => {
                        tg.MainButton.setText('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
                        tg.MainButton.show();
                    })
                    .catch(() => {
                        tg.MainButton.hide();
                    });
            }, 300),
        [form]
    );

    useEffect(() => {
        form.setFieldsValue({
            name: '',
            phone: '',
            deliveryMethod: undefined,
        });

        validateAndShowButton();

        return () => {
            tg.MainButton.hide();
        };
    }, [form, validateAndShowButton]);

    // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" –≤ Telegram
    useEffect(() => {
        const handleMainButtonClick = () => {
            form.submit(); // –≤—ã–∑–æ–≤–µ—Ç onFinish
        };

        tg.MainButton.onClick(handleMainButtonClick);
        return () => {
            tg.MainButton.offClick(handleMainButtonClick);
        };
    }, [form]);

    async function handleOrderSubmit(values) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É
        const details = {
            ...values,
            address: values.deliveryMethod === 'delivery' ? values.address : pickupAddress,
            items: orderItems.map((item) => ({
                ...item,
                // –ï—Å–ª–∏ price ‚Äî —É–∂–µ –≤—Å—è —Å—É–º–º–∞ –∑–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –∫–ª–∞–¥—ë–º –≤ total
                total: Number(item.price).toFixed(2),
            })),
            // –û–±—â–∞—è —Å—É–º–º–∞
            totalPrice: totalPrice.toFixed(2),
        };

        try {
            tg.sendData(JSON.stringify(details));

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WebApp
            const itemsList = details.items
                .map((item) => {
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º total
                    const itemTotal = Number(item.total).toLocaleString('ru-RU', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2,
                    });
                    return `${item.title} ‚Äî ${item.quantity} ${unitMapping[item.type]} ‚Äî ${itemTotal} VND${
                        item.toppings.length
                            ? ' (–¢–æ–ø–ø–∏–Ω–≥–∏: ' +
                            item.toppings.map((t) => toppingsMapping[t] || t).join(', ') +
                            ')'
                            : ''
                    }`;
                })
                .join('\n');

            const msg = `üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n\n${itemsList}\n\nüí≥ *–ò—Ç–æ–≥–æ:* ${details.totalPrice} VND\n\nüìç *–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:* ${
                details.deliveryMethod === 'delivery'
                    ? '–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å: ' + details.address
                    : '–°–∞–º–æ–≤—ã–≤–æ–∑'
            }`;

            tg.showAlert('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
            console.log('[DEBUG] Message sent to user:', msg);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp
            tg.close();

            setOrderDetails(details);
            setShowPopup(true);
            message.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!');
        } catch (error) {
            console.error('[ERROR] Sending order details:', error);
            message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
        }
    }

    return (
        <>
            <div className="order-container">
                <div className="order-details">
                    {orderItems.map((item, index) => {
                        const title = item.title.includes('–ù–∞—Ä–µ–∑–∫–∞') ? `–õ–æ—Å–æ—Å—å ${item.title}` : item.title;
                        // –¶–µ–Ω–∞ (item.price) = —É–∂–µ –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –ø–æ–∑–∏—Ü–∏—é
                        const priceStr = Number(item.price).toLocaleString('ru-RU');
                        return (
                            <div key={item.id} className="order-item">
                                <img
                                    src={item.image || '../../images/fish.webp'}
                                    alt={item.title}
                                    className="order-item-image"
                                />
                                <div className="order-item-info">
                                    <h3>{title}</h3>
                                    <p>
                                        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}
                                        {unitMapping[item.type]}
                                    </p>
                                    {item.toppings.length > 0 && (
                                        <p>
                                            –¢–æ–ø–ø–∏–Ω–≥–∏:{' '}
                                            {item.toppings
                                                .map((t) => toppingsMapping[t] || t)
                                                .join(', ')}
                                        </p>
                                    )}
                                    <p>–¶–µ–Ω–∞: {priceStr} VND</p>
                                    {index < orderItems.length - 1 && <hr />}
                                    <div className="order-item-actions">
                                        <button
                                            className="edit-button"
                                            onClick={() => {
                                                sessionStorage.setItem(
                                                    `${item.type}OrderData`,
                                                    JSON.stringify(item)
                                                );
                                                navigate(`/${item.type}`);
                                            }}
                                        >
                                            –ò–∑–º–µ–Ω–∏—Ç—å
                                        </button>
                                        <button
                                            className="delete-button"
                                            onClick={() => {
                                                setOrderItems((prevItems) =>
                                                    prevItems.filter((_, i) => i !== index)
                                                );
                                            }}
                                        >
                                            –£–¥–∞–ª–∏—Ç—å
                                        </button>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                    <h2>
                        –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:{' '}
                        {totalPrice > 0 ? totalPrice.toLocaleString('ru-RU') : '0'} VND
                    </h2>
                </div>

                {showPopup && (
                    <OrderPopup
                        onClose={() => tg.close()}
                        orderDetails={orderDetails}
                        webAppQueryId={webAppQueryId}
                    />
                )}
            </div>

            <h3 className="add-order-header">–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑</h3>
            <div className="order-buttons">
                <button onClick={() => navigate('/cheese')}>–°—ã—Ä–Ω–∏–∫–∏</button>
                <button onClick={() => navigate('/fish')}>–õ–æ—Å–æ—Å—å</button>
                <button onClick={() => navigate('/lemon')}>–õ–∏–º–æ–Ω—ã</button>
            </div>

            {/* –§–æ—Ä–º–∞ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ submit, –∏—Å–ø–æ–ª—å–∑—É–µ–º MainButton Telegram) */}
            <div className="order-form">
                <h3>–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</h3>
                <Form
                    layout="vertical"
                    form={form}
                    onFinish={handleOrderSubmit}
                    onValuesChange={validateAndShowButton}
                    initialValues={{
                        name: '',
                        phone: '',
                        deliveryMethod: undefined,
                    }}
                >
                    <Form.Item
                        label={<span className="form-label">–ò–º—è</span>}
                        name="name"
                        rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è' }]}
                    >
                        <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" />
                    </Form.Item>
                    <Form.Item
                        label={<span className="form-label">–¢–µ–ª–µ—Ñ–æ–Ω</span>}
                        name="phone"
                        rules={[
                            {
                                required: true,
                                pattern: /^\+?\d{10,15}$/,
                                message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                            },
                        ]}
                    >
                        <Input
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                            inputMode="numeric"
                            pattern="[0-9]*"
                        />
                    </Form.Item>
                    <Form.Item
                        label={<span className="form-label">–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è</span>}
                        name="deliveryMethod"
                        rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è' }]}
                    >
                        <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è" allowClear>
                            <Option value="pickup">–°–∞–º–æ–≤—ã–≤–æ–∑</Option>
                            <Option value="delivery">–î–æ—Å—Ç–∞–≤–∫–∞</Option>
                        </Select>
                    </Form.Item>
                    <Form.Item
                        shouldUpdate={(prevValues, currentValues) =>
                            prevValues.deliveryMethod !== currentValues.deliveryMethod
                        }
                    >
                        {({ getFieldValue }) => {
                            const deliveryMethod = getFieldValue('deliveryMethod');
                            if (deliveryMethod === 'delivery') {
                                return (
                                    <Form.Item
                                        label={<span className="form-label">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</span>}
                                        name="address"
                                        rules={[
                                            {
                                                required: true,
                                                message: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
                                            },
                                        ]}
                                    >
                                        <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" />
                                    </Form.Item>
                                );
                            } else if (deliveryMethod === 'pickup') {
                                return (
                                    <p className="pickup-address">
                                        –°–∞–º–æ–≤—ã–≤–æ–∑: {pickupAddress}
                                    </p>
                                );
                            }
                            return null;
                        }}
                    </Form.Item>
                </Form>
            </div>
        </>
    );
}

export default OrderPage;
